[{"path":"https://adlieben.github.io/academicRules/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 academicRules authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://adlieben.github.io/academicRules/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Maghout. Maintainer.","code":""},{"path":"https://adlieben.github.io/academicRules/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maghout (2025). academicRules: Apply passing rules student grades. R package version 1.0.0, https://adlieben.github.io/academicRules/.","code":"@Manual{,   title = {academicRules: Apply passing rules to student grades},   author = {Adam Maghout},   year = {2025},   note = {R package version 1.0.0},   url = {https://adlieben.github.io/academicRules/}, }"},{"path":"https://adlieben.github.io/academicRules/index.html","id":"academicrules","dir":"","previous_headings":"","what":"Apply passing rules to student grades","title":"Apply passing rules to student grades","text":"R package created facilitate thesis project conducted Adam Maghout International Baccalaureate Organisation (IBO). functions within package allow users obtain passing decisions students given set passing criteria. package also enables investigating consequences change passing criteria finding optimal passing criteria approach target passing rate (e.g. 80%).","code":""},{"path":"https://adlieben.github.io/academicRules/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Apply passing rules to student grades","text":"can install latest version academicRules GitHub : {r} remotes::install_github(\"Adlieben/academicRules\")","code":""},{"path":"https://adlieben.github.io/academicRules/index.html","id":"quickstart-example","dir":"","previous_headings":"","what":"Quickstart Example","title":"Apply passing rules to student grades","text":"SynthIB dataset can used get basic understanding main functionalities package:","code":"library(academicRules)  # 1) Load the built-in example data data(\"SynthIB\")  # 2) Define some simple rules my_rules <- define_rule_set(   list(     min_score = list(type=\"minimum\", value=24, dimension=\"Total\"),     max_fails = list(type=\"maximum\", value=2, dimension=\"count_2\")   ) )  # 3) Apply the rules to see who passes/fails results <- apply_rules(dummy_ib_data, my_rules, outcome_col_name=\"OUTCOME\") table(results$OUTCOME)"},{"path":"https://adlieben.github.io/academicRules/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Apply passing rules to student grades","text":"detailed reference functions, along vignettes examples, available academicRules website.","code":""},{"path":"https://adlieben.github.io/academicRules/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Apply passing rules to student grades","text":"Utrecht University providing resources thesis. International Baccalaureate Organisation supporting thesis project. Anton Béguin supervising thesis.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/SynthIB.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic IBDP-like Dataset — SynthIB","title":"Synthetic IBDP-like Dataset — SynthIB","text":"small synthetic dataset four students, illustrating columns needed typical IBDP pass/fail rules (CAS, total points, HL/SL sums, etc.).","code":""},{"path":"https://adlieben.github.io/academicRules/reference/SynthIB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic IBDP-like Dataset — SynthIB","text":"","code":"SynthIB"},{"path":"https://adlieben.github.io/academicRules/reference/SynthIB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic IBDP-like Dataset — SynthIB","text":"data frame 4 rows 10 columns: student_id Unique ID string student. CAS_met Logical indicating whether CAS requirement fulfilled. Total Numeric: total points across 6 subjects + core points. lowest_grade Numeric: lowest subject grade (1–7). count_2 Number subjects scored 2. count_3orbelow Number subjects scored 3 . HL_sum Sum top 3 HL scores. SL_sum Sum SL scores. n_HL Number HL subjects taken. n_SL Number SL subjects taken.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/SynthIB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic IBDP-like Dataset — SynthIB","text":"","code":"# Load the dataset data(\"SynthIB\") head(SynthIB) #>   student_id CAS_met Total lowest_grade count_2 count_3orbelow HL_sum SL_sum #> 1       S001    TRUE    25            3       0              1     12     11 #> 2       S002    TRUE    20            2       1              2      8     10 #> 3       S003   FALSE    27            4       0              0     15     10 #> 4       S004    TRUE    30            4       0              0     15     12 #>   n_HL n_SL #> 1    3    3 #> 2    3    3 #> 3    3    3 #> 4    3    3"},{"path":"https://adlieben.github.io/academicRules/reference/apply_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply academic rules to a data frame — apply_rules","title":"Apply academic rules to a data frame — apply_rules","text":"row data, evaluates rules ruleset specified priority order. rule triggered, row's outcome set \"FAIL\" (equivalent). rules triggered, row remains default outcome (e.g., \"PASS\").","code":""},{"path":"https://adlieben.github.io/academicRules/reference/apply_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply academic rules to a data frame — apply_rules","text":"","code":"apply_rules(data, ruleset, outcome_col_name = \"OUTCOME\")"},{"path":"https://adlieben.github.io/academicRules/reference/apply_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply academic rules to a data frame — apply_rules","text":"data data frame tibble. row represents student entity. ruleset object class \"academic_ruleset\" define_rule_set. outcome_col_name character string new column's name (e.g. \"OUTCOME\").","code":""},{"path":"https://adlieben.github.io/academicRules/reference/apply_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply academic rules to a data frame — apply_rules","text":"original data extra column named outcome_col_name.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/apply_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply academic rules to a data frame — apply_rules","text":"","code":"df <- data.frame(   id = 1:4,   score = c(60, 49, 70, 50),   fails = c(0, 1, 3, 2) )  rs <- define_rule_set(list(   \"min_score\" = list(type = \"minimum\", value = 50, dimension = \"score\"),   \"max_fails\" = list(type = \"maximum\", value = 2, dimension = \"fails\") ))  out <- apply_rules(df, rs, \"RESULT\") out #>   id score fails RESULT #> 1  1    60     0   PASS #> 2  2    49     1   FAIL #> 3  3    70     3   FAIL #> 4  4    50     2   PASS"},{"path":"https://adlieben.github.io/academicRules/reference/define_rule_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","title":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","text":"Creates returns object class \"academic_ruleset\", containing one rules. rule can type: \"minimum\": Fail column specified value. \"maximum\": Fail column specified value. \"logical\": Fail row-wise logical expression evaluates FALSE.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/define_rule_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","text":"","code":"define_rule_set(   rules_list = list(),   default_outcome = \"PASS\",   rule_priority = NULL )"},{"path":"https://adlieben.github.io/academicRules/reference/define_rule_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","text":"rules_list named list rules. element : type Either \"minimum\", \"maximum\", \"logical\". value (\"minimum\" \"maximum\") numeric value compare . dimension (\"minimum\" \"maximum\") name numeric column data. expr (\"logical\") formula like ~ expression, evaluated row-wise. default_outcome Character string giving outcome assign none rules triggered row (e.g., \"PASS\"). rule_priority character vector giving order rules applied. NULL, order simply names rules_list.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/define_rule_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","text":"object class \"academic_ruleset\", essentially list rules: rules_list default_outcome: default outcome rule_priority: order rule application","code":""},{"path":"https://adlieben.github.io/academicRules/reference/define_rule_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a set of academic rules (minimum, maximum, or logical) — define_rule_set","text":"","code":"# A simple set of rules my_rules <- define_rule_set(   rules_list = list(     \"min_score\" = list(type = \"minimum\", value = 50, dimension = \"test_score\"),     \"too_many_fails\" = list(type = \"maximum\", value = 2, dimension = \"fail_count\"),     \"final_check\" = list(type = \"logical\", expr = ~ subject_grade != \"N\")   ),   default_outcome = \"PASS\" )"},{"path":"https://adlieben.github.io/academicRules/reference/explain_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain how each row was classified according to the rules — explain_classification","title":"Explain how each row was classified according to the rules — explain_classification","text":"row, indicates whether rule triggered fail , shows final outcome.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/explain_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain how each row was classified according to the rules — explain_classification","text":"","code":"explain_classification(data, ruleset, outcome_col_name = \"OUTCOME\")"},{"path":"https://adlieben.github.io/academicRules/reference/explain_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain how each row was classified according to the rules — explain_classification","text":"data data frame already classified apply_rules, .e., final outcome column. ruleset object class \"academic_ruleset\". outcome_col_name name classification column data (e.g. \"OUTCOME\").","code":""},{"path":"https://adlieben.github.io/academicRules/reference/explain_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain how each row was classified according to the rules — explain_classification","text":"list length nrow(data), element : index: row index final_classification: final classification (PASS FAIL, etc.) rules_evaluation: list texts describing whether rule triggered","code":""},{"path":"https://adlieben.github.io/academicRules/reference/explain_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain how each row was classified according to the rules — explain_classification","text":"","code":"df <- data.frame(id=1:2, score=c(60,45), fails=c(0,3)) rs <- define_rule_set(list(   min_score = list(type=\"minimum\", value=50, dimension=\"score\"),   max_fails = list(type=\"maximum\", value=2, dimension=\"fails\") ))  out <- apply_rules(df, rs, \"OUTCOME\") explain_classification(out, rs, \"OUTCOME\") #> [[1]] #> [[1]]$index #> [1] 1 #>  #> [[1]]$final_classification #> [1] \"PASS\" #>  #> [[1]]$rules_evaluation #> [[1]]$rules_evaluation$min_score #> [1] \"Not triggered: 60 >= 50\" #>  #> [[1]]$rules_evaluation$max_fails #> [1] \"Not triggered: 0 <= 2\" #>  #>  #>  #> [[2]] #> [[2]]$index #> [1] 2 #>  #> [[2]]$final_classification #> [1] \"FAIL\" #>  #> [[2]]$rules_evaluation #> [[2]]$rules_evaluation$min_score #> [1] \"Triggered: 45 < 50\" #>  #> [[2]]$rules_evaluation$max_fails #> [1] \"Triggered: 3 > 2\" #>  #>  #>"},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a policy change by modifying or removing rules — simulate_policy_change","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"Creates temporary copy ruleset, applies requested modifications (e.g., changing value rule removing rule entirely), applies updated ruleset dataset get new outcome column.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"","code":"simulate_policy_change(   data,   ruleset,   modifications = list(),   outcome_col_name = \"OUTCOME_CHANGED\" )"},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"data data frame tibble containing student/entity data. ruleset object class academic_ruleset define_rule_set. modifications named list modifications. name must match rule ruleset. value either: list fields change (e.g., list(value=26)), NULL, indicating rule removed entirely. outcome_col_name string new outcome column (e.g. \"OUTCOME_CHANGED\").","code":""},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"copy data new column outcome_col_name containing results applying modified ruleset.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"Modifying rule: Provide named list fields change, e.g., list(minimum_score = list(value=26)) set rules$minimum_score$value = 26. Removing rule: Provide NULL instead list rule, e.g. list(cas_requirement = NULL). completely removes rule ruleset (rule_priority).","code":""},{"path":[]},{"path":"https://adlieben.github.io/academicRules/reference/simulate_policy_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a policy change by modifying or removing rules — simulate_policy_change","text":"","code":"# Example: raising a minimum threshold and removing a logical rule (based on IBDP passing criteria) df <- data.frame(score = c(24,25,30), CAS_met = c(FALSE, TRUE, TRUE))  rs <- define_rule_set(   list(     cas_rule = list(type = \"logical\", expr = ~ CAS_met),     min_score = list(type = \"minimum\", value = 24, dimension = \"score\")   ),   default_outcome = \"PASS\" )  # Baseline classification baseline <- apply_rules(df, rs, outcome_col_name = \"BASE_OUTCOME\")  # Now remove 'cas_rule' and raise 'min_score' to 26 modifications <- list(   cas_rule = NULL,             # remove the CAS rule   min_score = list(value = 26) # raise threshold from 24 to 26 )  changed <- simulate_policy_change(df, rs, modifications, \"NEW_OUTCOME\") #> Removing rule 'cas_rule' from the ruleset.  cbind(baseline, changed[\"NEW_OUTCOME\"]) #>   score CAS_met BASE_OUTCOME NEW_OUTCOME #> 1    24   FALSE         FAIL        FAIL #> 2    25    TRUE         PASS        FAIL #> 3    30    TRUE         PASS        PASS"},{"path":"https://adlieben.github.io/academicRules/reference/tune_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","title":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","text":"Performs grid search multiple rules, may vector candidate numeric values. combination, applies updated ruleset, computes pass rate, identifies combination yields pass rate closest user-specified target.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/tune_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","text":"","code":"tune_rules(   data,   ruleset,   candidates,   target_rate,   outcome_col_name = \"TUNED_OUTCOME\" )"},{"path":"https://adlieben.github.io/academicRules/reference/tune_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","text":"data data frame tibble classified. ruleset object class \"academic_ruleset\". candidates named list vectors. name corresponds rule ruleset, vector candidate values try rule$value. example: list(min_total=20:30, max_fails=0:3). rule must type \"minimum\" \"maximum\" (.e., numeric). include \"logical\" rule candidates, work unless also numeric field, rare. target_rate numeric 0 1, desired pass rate. outcome_col_name Name outcome column classified data. Defaults \"TUNED_OUTCOME\".","code":""},{"path":"https://adlieben.github.io/academicRules/reference/tune_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","text":"list components: best_params named vector numeric values rule yields pass rate closest target_rate. best_rate pass rate combination. results data frame one row per combination, containing pass rate parameter values.","code":""},{"path":"https://adlieben.github.io/academicRules/reference/tune_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune multiple numeric rules to approach a desired pass rate — tune_rules","text":"","code":"if (FALSE) { # \\dontrun{ # Suppose we have a rule 'min_total' (minimum) that must be >=24 # and a rule 'max_2s' (maximum) that must be <=2 my_rules <- define_rule_set(list(   min_total = list(type=\"minimum\", value=24, dimension=\"Total\"),   max_2s    = list(type=\"maximum\", value=2, dimension=\"count_2\") ))  # We'll try min_total in [20, 22, 24, 26, 28] and max_2s in [1,2,3] # aiming for a pass rate near 0.70 multi_res <- tune_rules(   data = dummy_ib_data,   ruleset = my_rules,   candidates = list(min_total = seq(20, 28, 2),                     max_2s    = 1:3),   target_rate = 0.70 ) multi_res$best_params multi_res$best_rate head(multi_res$results) } # }"}]
