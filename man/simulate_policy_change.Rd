% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_policy_change.R
\name{simulate_policy_change}
\alias{simulate_policy_change}
\title{Simulate a policy change by modifying or removing rules}
\usage{
simulate_policy_change(
  data,
  ruleset,
  modifications = list(),
  outcome_col_name = "OUTCOME_CHANGED"
)
}
\arguments{
\item{data}{A data frame or tibble containing student/entity data.}

\item{ruleset}{An object of class \code{academic_ruleset} from
\code{\link{define_rule_set}}.}

\item{modifications}{A named list of modifications. Each name must match a rule
in \code{ruleset}. The value is either:
\itemize{
\item A list of fields to change (e.g., \code{list(value=26)}),
\item \code{NULL}, indicating that the rule should be removed entirely.
}}

\item{outcome_col_name}{A string for the new outcome column (e.g. \code{"OUTCOME_CHANGED"}).}
}
\value{
A copy of \code{data} with a new column \code{outcome_col_name}
containing the results of applying the modified ruleset.
}
\description{
Creates a temporary copy of the ruleset, applies your requested modifications
(e.g., changing the \code{value} for a rule or removing a rule entirely), and
then applies the updated ruleset to the dataset to get a new outcome column.
}
\details{
\itemize{
\item \strong{Modifying a rule}: Provide a named list of fields to change, e.g.,
\code{list(minimum_score = list(value=26))} will set \code{rules$minimum_score$value = 26}.
\item \strong{Removing a rule}: Provide \code{NULL} instead of a list for the rule, e.g.
\code{list(cas_requirement = NULL)}. This completely removes the rule from
the ruleset (and from \code{rule_priority}).
}
}
\examples{
# Example: raising a minimum threshold and removing a logical rule (based on IBDP passing criteria)
df <- data.frame(score = c(24,25,30), CAS_met = c(FALSE, TRUE, TRUE))

rs <- define_rule_set(
  list(
    cas_rule = list(type = "logical", expr = ~ CAS_met),
    min_score = list(type = "minimum", value = 24, dimension = "score")
  ),
  default_outcome = "PASS"
)

# Baseline classification
baseline <- apply_rules(df, rs, outcome_col_name = "BASE_OUTCOME")

# Now remove 'cas_rule' and raise 'min_score' to 26
modifications <- list(
  cas_rule = NULL,             # remove the CAS rule
  min_score = list(value = 26) # raise threshold from 24 to 26
)

changed <- simulate_policy_change(df, rs, modifications, "NEW_OUTCOME")

cbind(baseline, changed["NEW_OUTCOME"])
}
\seealso{
\code{\link{apply_rules}} for applying a ruleset directly.
}
